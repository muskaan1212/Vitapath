"use client"

import { useState, useRef, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import {
  Send,
  Mic,
  ArrowLeft,
  Bot,
  User,
  Heart,
  MapPin,
  Utensils,
  Dumbbell,
  Shield,
  Sparkles,
  Globe,
} from "lucide-react"
import Link from "next/link"

interface Message {
  id: string
  type: "user" | "bot"
  content: string
  timestamp: Date
  category?: "health" | "navigation" | "food" | "fitness" | "safety" | "general" | "ayurveda" | "indian"
  language?: "en" | "hi"
}

export default function ChatbotPage() {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: "1",
      type: "bot",
      content:
        "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! I'm your AI health and lifestyle assistant. ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç with meal suggestions, navigation, safety tips, Ayurvedic remedies, and more. ‡§Ü‡§™ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Ø‡§æ English ‡§Æ‡•á‡§Ç ‡§¨‡§æ‡§§ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§ What would you like to know?",
      timestamp: new Date(),
      category: "general",
      language: "en",
    },
  ])
  const [inputMessage, setInputMessage] = useState("")
  const [isTyping, setIsTyping] = useState(false)
  const [selectedLanguage, setSelectedLanguage] = useState<"en" | "hi" | "both">("both")
  const messagesEndRef = useRef<HTMLDivElement>(null)

  const quickActions = [
    { text: "Suggest healthy Indian meal", icon: Utensils, category: "food", hindi: "‡§∏‡•ç‡§µ‡§∏‡•ç‡§• ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§≠‡•ã‡§ú‡§® ‡§∏‡•Å‡§ù‡§æ‡§è‡§Ç" },
    { text: "Plan workout for monsoon", icon: Dumbbell, category: "fitness", hindi: "‡§Æ‡§æ‡§®‡§∏‡•Ç‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§µ‡•ç‡§Ø‡§æ‡§Ø‡§æ‡§Æ ‡§Ø‡•ã‡§ú‡§®‡§æ" },
    { text: "Safe route in Mumbai traffic", icon: MapPin, category: "navigation", hindi: "‡§Æ‡•Å‡§Ç‡§¨‡§à ‡§ü‡•ç‡§∞‡•à‡§´‡§ø‡§ï ‡§Æ‡•á‡§Ç ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§∞‡§æ‡§∏‡•ç‡§§‡§æ" },
    { text: "Ayurvedic remedy for heat", icon: Heart, category: "ayurveda", hindi: "‡§ó‡§∞‡•ç‡§Æ‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§Ø‡•Å‡§∞‡•ç‡§µ‡•á‡§¶‡§ø‡§ï ‡§â‡§™‡§æ‡§Ø" },
    { text: "Women safety tips", icon: Shield, category: "safety", hindi: "‡§Æ‡§π‡§ø‡§≤‡§æ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§∏‡•Å‡§ù‡§æ‡§µ" },
  ]

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  const generateBotResponse = (userMessage: string): { content: string; category: string; language: "en" | "hi" } => {
    const message = userMessage.toLowerCase()
    const isHindi = /[\u0900-\u097F]/.test(userMessage)

    // Indian food suggestions
    if (message.includes("meal") || message.includes("food") || message.includes("‡§ñ‡§æ‡§®‡§æ") || message.includes("‡§≠‡•ã‡§ú‡§®")) {
      return {
        content: isHindi
          ? "‡§Ü‡§™‡§ï‡•á ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤ ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞, ‡§Æ‡•à‡§Ç ‡§∏‡•Å‡§ù‡§æ‡§§‡§æ ‡§π‡•Ç‡§Ç:\n\nü•ó ‡§¶‡§æ‡§≤-‡§ö‡§æ‡§µ‡§≤ with ‡§∏‡§¨‡•ç‡§ú‡•Ä ‡§î‡§∞ ‡§¶‡§π‡•Ä\nüçõ ‡§ï‡•ç‡§µ‡§ø‡§®‡•ã‡§Ü ‡§â‡§™‡§Æ‡§æ with ‡§®‡§æ‡§∞‡§ø‡§Ø‡§≤ ‡§ö‡§ü‡§®‡•Ä\nü•ô ‡§∞‡•ã‡§ü‡•Ä with ‡§™‡§æ‡§≤‡§ï ‡§™‡§®‡•Ä‡§∞\nüç≤ ‡§∏‡§æ‡§Ç‡§≠‡§∞ with ‡§á‡§°‡§≤‡•Ä\n\n‡§Ø‡•á ‡§∏‡§≠‡•Ä ‡§™‡•ç‡§∞‡•ã‡§ü‡•Ä‡§®, ‡§´‡§æ‡§á‡§¨‡§∞ ‡§î‡§∞ ‡§µ‡§ø‡§ü‡§æ‡§Æ‡§ø‡§® ‡§∏‡•á ‡§≠‡§∞‡§™‡•Ç‡§∞ ‡§π‡•à‡§Ç‡•§ ‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§ï‡§ø‡§∏‡•Ä specific recipe ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§®‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?"
          : "Based on your health profile and Indian preferences, I recommend:\n\nü•ó Dal-Rice with mixed vegetables and curd\nüçõ Quinoa upma with coconut chutney\nü•ô Roti with palak paneer\nüç≤ Sambar with idli\n\nThese provide complete proteins, fiber, and essential vitamins. Would you like a specific recipe?",
        category: "food",
        language: isHindi ? "hi" : "en",
      }
    }

    // Ayurvedic remedies
    if (
      message.includes("ayurved") ||
      message.includes("‡§Ü‡§Ø‡•Å‡§∞‡•ç‡§µ‡•á‡§¶") ||
      message.includes("remedy") ||
      message.includes("‡§â‡§™‡§æ‡§Ø")
    ) {
      return {
        content: isHindi
          ? "‡§Ü‡§Ø‡•Å‡§∞‡•ç‡§µ‡•á‡§¶‡§ø‡§ï ‡§∏‡•Å‡§ù‡§æ‡§µ:\n\nüåø ‡§ó‡§∞‡•ç‡§Æ‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è: ‡§®‡§æ‡§∞‡§ø‡§Ø‡§≤ ‡§™‡§æ‡§®‡•Ä, ‡§Ü‡§Ç‡§µ‡§≤‡§æ ‡§ú‡•Ç‡§∏, ‡§™‡•Å‡§¶‡•Ä‡§®‡§æ\nüçØ ‡§™‡§æ‡§ö‡§® ‡§ï‡•á ‡§≤‡§ø‡§è: ‡§Ö‡§ú‡§µ‡§æ‡§á‡§®, ‡§π‡•Ä‡§Ç‡§ó, ‡§ú‡•Ä‡§∞‡§æ ‡§™‡§æ‡§®‡•Ä\nüßò ‡§§‡§®‡§æ‡§µ ‡§ï‡•á ‡§≤‡§ø‡§è: ‡§Ö‡§∂‡•ç‡§µ‡§ó‡§Ç‡§ß‡§æ, ‡§¨‡•ç‡§∞‡§æ‡§π‡•ç‡§Æ‡•Ä, ‡§Ø‡•ã‡§ó\nüå± ‡§∞‡•ã‡§ó ‡§™‡•ç‡§∞‡§§‡§ø‡§∞‡•ã‡§ß‡§ï ‡§ï‡•ç‡§∑‡§Æ‡§§‡§æ: ‡§§‡•Å‡§≤‡§∏‡•Ä, ‡§ó‡§ø‡§≤‡•ã‡§Ø, ‡§π‡§≤‡•ç‡§¶‡•Ä\n\n‡§ï‡•É‡§™‡§Ø‡§æ ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§ú‡§°‡§º‡•Ä-‡§¨‡•Ç‡§ü‡•Ä ‡§ï‡§æ ‡§∏‡•á‡§µ‡§® ‡§ï‡§∞‡§®‡•á ‡§∏‡•á ‡§™‡§π‡§≤‡•á ‡§Ü‡§Ø‡•Å‡§∞‡•ç‡§µ‡•á‡§¶‡§ø‡§ï ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§∏‡§≤‡§æ‡§π ‡§≤‡•á‡§Ç‡•§"
          : "Ayurvedic recommendations:\n\nüåø For heat: Coconut water, amla juice, mint\nüçØ For digestion: Ajwain, hing, cumin water\nüßò For stress: Ashwagandha, brahmi, yoga\nüå± For immunity: Tulsi, giloy, turmeric\n\nPlease consult an Ayurvedic doctor before taking any herbs.",
        category: "ayurveda",
        language: isHindi ? "hi" : "en",
      }
    }

    // Navigation and traffic
    if (
      message.includes("route") ||
      message.includes("traffic") ||
      message.includes("‡§∞‡§æ‡§∏‡•ç‡§§‡§æ") ||
      message.includes("‡§ü‡•ç‡§∞‡•à‡§´‡§ø‡§ï")
    ) {
      return {
        content: isHindi
          ? "‡§Æ‡•Å‡§Ç‡§¨‡§à ‡§ü‡•ç‡§∞‡•à‡§´‡§ø‡§ï ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•Å‡§ù‡§æ‡§µ:\n\nüöá ‡§Æ‡•á‡§ü‡•ç‡§∞‡•ã/‡§≤‡•ã‡§ï‡§≤ ‡§ü‡•ç‡§∞‡•á‡§® ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç (9-11 AM, 4-7 PM ‡§Æ‡•á‡§Ç ‡§≠‡•Ä‡§°‡§º ‡§∏‡•á ‡§¨‡§ö‡•á‡§Ç)\nüõ£Ô∏è SV Road ‡§ï‡•Ä ‡§¨‡§ú‡§æ‡§Ø Link Road ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç\n‚è∞ Rush hours (8-11 AM, 6-9 PM) ‡§∏‡•á ‡§¨‡§ö‡•á‡§Ç\nüì± Google Maps live traffic ‡§¶‡•á‡§ñ‡•á‡§Ç\nüèçÔ∏è ‡§õ‡•ã‡§ü‡•Ä ‡§¶‡•Ç‡§∞‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è bike taxi\n\n‡§ï‡•å‡§® ‡§∏‡§æ specific route ‡§ö‡§æ‡§π‡§ø‡§è?"
          : "Mumbai traffic suggestions:\n\nüöá Use Metro/Local trains (avoid 9-11 AM, 4-7 PM rush)\nüõ£Ô∏è Take Link Road instead of SV Road\n‚è∞ Avoid rush hours (8-11 AM, 6-9 PM)\nüì± Check Google Maps live traffic\nüèçÔ∏è Bike taxi for short distances\n\nWhich specific route do you need?",
        category: "navigation",
        language: isHindi ? "hi" : "en",
      }
    }

    // Women safety
    if (
      message.includes("safety") ||
      message.includes("women") ||
      message.includes("‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ") ||
      message.includes("‡§Æ‡§π‡§ø‡§≤‡§æ")
    ) {
      return {
        content: isHindi
          ? "‡§Æ‡§π‡§ø‡§≤‡§æ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§∏‡•Å‡§ù‡§æ‡§µ:\n\nüö® Emergency numbers: 100 (Police), 1091 (Women Helpline)\nüì± Location sharing family ‡§ï‡•á ‡§∏‡§æ‡§• ‡§ï‡§∞‡•á‡§Ç\nüåÉ ‡§∞‡§æ‡§§ ‡§Æ‡•á‡§Ç well-lit areas ‡§Æ‡•á‡§Ç ‡§ö‡§≤‡•á‡§Ç\nüë• Crowded places prefer ‡§ï‡§∞‡•á‡§Ç\nüöó Trusted cab services ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç\nüìû Fake call feature ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç\n\nPanic button ‡§π‡§Æ‡•á‡§∂‡§æ ready ‡§∞‡§ñ‡•á‡§Ç!"
          : "Women safety tips:\n\nüö® Emergency numbers: 100 (Police), 1091 (Women Helpline)\nüì± Share live location with family\nüåÉ Stick to well-lit areas at night\nüë• Prefer crowded places\nüöó Use trusted cab services\nüìû Use fake call feature when needed\n\nKeep panic button always ready!",
        category: "safety",
        language: isHindi ? "hi" : "en",
      }
    }

    // Monsoon/weather specific
    if (
      message.includes("monsoon") ||
      message.includes("rain") ||
      message.includes("‡§Æ‡§æ‡§®‡§∏‡•Ç‡§®") ||
      message.includes("‡§¨‡§æ‡§∞‡§ø‡§∂")
    ) {
      return {
        content: isHindi
          ? "‡§Æ‡§æ‡§®‡§∏‡•Ç‡§® ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡•Å‡§ù‡§æ‡§µ:\n\n‚òî ‡§¨‡§æ‡§∞‡§ø‡§∂ ‡§Æ‡•á‡§Ç ‡§≠‡•Ä‡§ó‡§®‡•á ‡§∏‡•á ‡§¨‡§ö‡•á‡§Ç\nü¶† Immunity ‡§¨‡§¢‡§º‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡§≤‡•ç‡§¶‡•Ä ‡§¶‡•Ç‡§ß ‡§™‡§ø‡§è‡§Ç\nüè† Indoor exercises ‡§ï‡§∞‡•á‡§Ç: yoga, stretching\nüç≤ ‡§ó‡§∞‡•ç‡§Æ ‡§ñ‡§æ‡§®‡§æ ‡§ñ‡§æ‡§è‡§Ç, street food ‡§∏‡•á ‡§¨‡§ö‡•á‡§Ç\nüíß Boiled water ‡§™‡§ø‡§è‡§Ç\nüëï ‡§∏‡•Ç‡§ñ‡•á ‡§ï‡§™‡§°‡§º‡•á ‡§™‡§π‡§®‡•á‡§Ç\n\nWaterlogging areas ‡§∏‡•á ‡§¨‡§ö‡•á‡§Ç!"
          : "Monsoon health tips:\n\n‚òî Avoid getting wet in rain\nü¶† Boost immunity with turmeric milk\nüè† Do indoor exercises: yoga, stretching\nüç≤ Eat warm food, avoid street food\nüíß Drink boiled water\nüëï Wear dry clothes\n\nAvoid waterlogged areas!",
        category: "health",
        language: isHindi ? "hi" : "en",
      }
    }

    // Default response
    return {
      content: isHindi
        ? "‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡§π‡§æ‡§Ç ‡§π‡•Ç‡§Ç! ‡§Ü‡§™ ‡§Æ‡•Å‡§ù‡§∏‡•á ‡§™‡•Ç‡§õ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç:\n\nüçΩÔ∏è ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§∏‡•ç‡§µ‡§∏‡•ç‡§• ‡§≠‡•ã‡§ú‡§® ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç\nüèÉ ‡§µ‡•ç‡§Ø‡§æ‡§Ø‡§æ‡§Æ ‡§î‡§∞ ‡§´‡§ø‡§ü‡§®‡•á‡§∏\nüó∫Ô∏è ‡§Æ‡•Å‡§Ç‡§¨‡§à ‡§Æ‡•á‡§Ç ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§∞‡§æ‡§∏‡•ç‡§§‡•á\nüåø ‡§Ü‡§Ø‡•Å‡§∞‡•ç‡§µ‡•á‡§¶‡§ø‡§ï ‡§â‡§™‡§ö‡§æ‡§∞\nüë© ‡§Æ‡§π‡§ø‡§≤‡§æ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ\nüåßÔ∏è ‡§Æ‡§æ‡§®‡§∏‡•Ç‡§® ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø\n\n‡§Ü‡§™ ‡§ï‡§ø‡§∏ ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§®‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?"
        : "I'm here to help you with:\n\nüçΩÔ∏è Healthy Indian meal suggestions\nüèÉ Exercise and fitness routines\nüó∫Ô∏è Safe routes in Mumbai\nüåø Ayurvedic remedies\nüë© Women safety tips\nüåßÔ∏è Monsoon health advice\n\nWhat specific area would you like assistance with?",
      category: "general",
      language: isHindi ? "hi" : "en",
    }
  }

  const handleSendMessage = async () => {
    if (!inputMessage.trim()) return

    const userMessage: Message = {
      id: Date.now().toString(),
      type: "user",
      content: inputMessage,
      timestamp: new Date(),
    }

    setMessages((prev) => [...prev, userMessage])
    setInputMessage("")
    setIsTyping(true)

    // Simulate AI processing delay
    setTimeout(() => {
      const { content, category, language } = generateBotResponse(inputMessage)
      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: "bot",
        content,
        timestamp: new Date(),
        category: category as any,
        language,
      }

      setMessages((prev) => [...prev, botMessage])
      setIsTyping(false)
    }, 1500)
  }

  const handleQuickAction = (actionText: string, hindi?: string) => {
    const text = selectedLanguage === "hi" && hindi ? hindi : actionText
    setInputMessage(text)
  }

  const getCategoryIcon = (category?: string) => {
    switch (category) {
      case "health":
      case "ayurveda":
        return Heart
      case "navigation":
        return MapPin
      case "food":
        return Utensils
      case "fitness":
        return Dumbbell
      case "safety":
        return Shield
      default:
        return Sparkles
    }
  }

  const getCategoryColor = (category?: string) => {
    switch (category) {
      case "health":
      case "ayurveda":
        return "text-green-500"
      case "navigation":
        return "text-blue-500"
      case "food":
        return "text-orange-500"
      case "fitness":
        return "text-purple-500"
      case "safety":
        return "text-red-500"
      default:
        return "text-gray-500"
    }
  }

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col">
      <div className="max-w-md mx-auto w-full flex flex-col h-screen">
        {/* Header */}
        <div className="flex items-center gap-4 p-4 bg-white border-b">
          <Link href="/">
            <Button variant="ghost" size="icon">
              <ArrowLeft className="h-5 w-5" />
            </Button>
          </Link>
          <div className="flex items-center gap-2 flex-1">
            <div className="bg-gradient-to-r from-orange-500 to-green-600 p-2 rounded-full">
              <Bot className="h-5 w-5 text-white" />
            </div>
            <div>
              <h1 className="text-lg font-bold">AI Assistant</h1>
              <p className="text-xs text-gray-600">‡§π‡§ø‡§Ç‡§¶‡•Ä + English Support</p>
            </div>
          </div>
          <div className="flex gap-1">
            <Button
              variant={selectedLanguage === "en" ? "default" : "ghost"}
              size="sm"
              onClick={() => setSelectedLanguage("en")}
            >
              EN
            </Button>
            <Button
              variant={selectedLanguage === "hi" ? "default" : "ghost"}
              size="sm"
              onClick={() => setSelectedLanguage("hi")}
            >
              ‡§π‡§ø‡§Ç
            </Button>
            <Button
              variant={selectedLanguage === "both" ? "default" : "ghost"}
              size="sm"
              onClick={() => setSelectedLanguage("both")}
            >
              <Globe className="h-3 w-3" />
            </Button>
          </div>
          <Badge variant="secondary" className="bg-green-100 text-green-700">
            Online
          </Badge>
        </div>

        {/* Messages */}
        <div className="flex-1 overflow-y-auto p-4 space-y-4">
          {messages.map((message) => (
            <div key={message.id} className={`flex gap-3 ${message.type === "user" ? "justify-end" : "justify-start"}`}>
              {message.type === "bot" && (
                <div className="bg-gradient-to-r from-orange-500 to-green-600 p-2 rounded-full h-8 w-8 flex items-center justify-center flex-shrink-0">
                  <Bot className="h-4 w-4 text-white" />
                </div>
              )}

              <div className={`max-w-[80%] ${message.type === "user" ? "order-1" : ""}`}>
                <div
                  className={`p-3 rounded-2xl ${
                    message.type === "user" ? "bg-blue-500 text-white ml-auto" : "bg-white border shadow-sm"
                  }`}
                >
                  {message.type === "bot" && message.category && (
                    <div className="flex items-center gap-1 mb-2">
                      {(() => {
                        const IconComponent = getCategoryIcon(message.category)
                        return <IconComponent className={`h-3 w-3 ${getCategoryColor(message.category)}`} />
                      })()}
                      <span className={`text-xs font-medium ${getCategoryColor(message.category)}`}>
                        {message.category === "ayurveda"
                          ? "‡§Ü‡§Ø‡•Å‡§∞‡•ç‡§µ‡•á‡§¶"
                          : message.category.charAt(0).toUpperCase() + message.category.slice(1)}
                      </span>
                      {message.language && (
                        <Badge variant="outline" className="text-xs ml-1">
                          {message.language === "hi" ? "‡§π‡§ø‡§Ç" : "EN"}
                        </Badge>
                      )}
                    </div>
                  )}
                  <p className="text-sm whitespace-pre-line">{message.content}</p>
                </div>
                <p className="text-xs text-gray-500 mt-1 px-3">
                  {message.timestamp.toLocaleTimeString("en-IN", { timeZone: "Asia/Kolkata" })} IST
                </p>
              </div>

              {message.type === "user" && (
                <div className="bg-blue-500 p-2 rounded-full h-8 w-8 flex items-center justify-center flex-shrink-0">
                  <User className="h-4 w-4 text-white" />
                </div>
              )}
            </div>
          ))}

          {isTyping && (
            <div className="flex gap-3 justify-start">
              <div className="bg-gradient-to-r from-orange-500 to-green-600 p-2 rounded-full h-8 w-8 flex items-center justify-center flex-shrink-0">
                <Bot className="h-4 w-4 text-white" />
              </div>
              <div className="bg-white border shadow-sm p-3 rounded-2xl">
                <div className="flex gap-1">
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                  <div
                    className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                    style={{ animationDelay: "0.1s" }}
                  ></div>
                  <div
                    className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                    style={{ animationDelay: "0.2s" }}
                  ></div>
                </div>
              </div>
            </div>
          )}
          <div ref={messagesEndRef} />
        </div>

        {/* Quick Actions */}
        <div className="p-4 bg-white border-t">
          <div className="flex gap-2 overflow-x-auto pb-2 mb-3">
            {quickActions.map((action, index) => (
              <Button
                key={index}
                variant="outline"
                size="sm"
                className="flex items-center gap-2 whitespace-nowrap flex-shrink-0"
                onClick={() => handleQuickAction(action.text, action.hindi)}
              >
                <action.icon className="h-3 w-3" />
                {selectedLanguage === "hi" && action.hindi ? action.hindi : action.text}
              </Button>
            ))}
          </div>

          {/* Input */}
          <div className="flex gap-2">
            <div className="flex-1 relative">
              <Input
                placeholder={
                  selectedLanguage === "hi"
                    ? "‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø, ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ, ‡§≠‡•ã‡§ú‡§® ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§™‡•Ç‡§õ‡•á‡§Ç..."
                    : "Ask about health, safety, food, Ayurveda..."
                }
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                onKeyPress={(e) => e.key === "Enter" && handleSendMessage()}
                className="pr-10"
              />
              <Button size="icon" variant="ghost" className="absolute right-1 top-1 h-8 w-8">
                <Mic className="h-4 w-4" />
              </Button>
            </div>
            <Button
              onClick={handleSendMessage}
              disabled={!inputMessage.trim() || isTyping}
              className="bg-gradient-to-r from-orange-500 to-green-600 hover:from-orange-600 hover:to-green-700"
            >
              <Send className="h-4 w-4" />
            </Button>
          </div>
        </div>
      </div>
    </div>
  )
}
